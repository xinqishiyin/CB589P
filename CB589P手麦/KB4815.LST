C51 COMPILER V9.52.0.0   KB4815                                                            06/02/2018 10:26:51 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE KB4815
OBJECT MODULE PLACED IN KB4815.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE KB4815.c LARGE OPTIMIZE(6,SPEED) BROWSE INCDIR(G:\CB589P) DEBUG OBJECTEXTEN
                    -D TABS(2)

line level    source

   1          #include "system.h"
   2          #include "KB4815.h"
   3          #include "TM1722.h"
   4          #include "lcd.h"
   5          
   6          /*--------设置参数结构体----------------*/
   7          Channel channel;
   8          u8 rexci[20];
   9          
  10          u8 recivecode[1]={1};
  11          u8 reccount=0;
  12          /*--------------全局变量-------------------------*/
  13          u16 g_reg0_15_buff[16];
  14          u16 xdata reg0_19[]=
  15          {
  16            0x0044,0x0019,0x0027,0xB641,0xF770,
  17            0xF274,0x08F0,0xFF33,0xC3FA,0xA2A3,
  18            0x8800,0x0603,0x03FD,0x5817,0x9091,
  19            0x88F9,0x5800,0x415C,0x08A0,
  20          };
  21          xdata u16 ramp_table[]=
  22          {
  23            0x0000,0x0420,0x083F,0x0C5E,0x107C,0x149A,0x18B7,0x1CD4,
  24            0x20F0,0x250B,0x2927,0x2D41,0x315C,0x3575,0x398F,0x3DA7,
  25            0x41C0,0x45D7,0x49EF,0x4E05,0x521B,0x5631,0x5A46,0x5E5B,
  26            0x626F,0x6683,0x6A96,0x6EA9,0x72BB,0x76CD,0x7ADE,0x7EEF,
  27            0x82FF,0x870F,0x8B1E,0x8F2D,0x933B,0x9749,0x9B56,0x9F63,
  28            0xA36F,0xA77B,0xAB86,0xAF91,0xB39B,0xB7A5,0xBBAE,0xBFB7,
  29            0xC3BF,0xC7C7,0xCBCE,0xCFD5,0xD3DB,0xD7E1,0xDBE6,0xDFEB,
  30            0xE3EF,0xE7F3,0xEBF6,0xEFF9,0xF3FB,0xF7FD,0xFBFE,0xFFFF
  31          };
  32          code u16 RecvDtmfLowArr[]= 
  33          {
  34          0x3ab, 0x2B8, 0x2B8, 0x2B8, 0x301, 0x301, 0x301, 0x353, 
  35          0x353, 0x353, 0x2B8, 0x301, 0x353, 0x3AB, 0x3AB, 0x3AB
  36          };
  37          code u16 RecvDtmfHighArr[]=
  38          {
  39          0x536, 0x4B7, 0x536, 0x5C2, 0x4B7, 0x536, 0x5C2, 0x4B7,
  40          0x536, 0x5C2, 0x65E, 0x65E, 0x65E, 0x65E, 0x4B7, 0x5C2
  41          };
  42          code u16 SendDtmfLowArr[]= 
  43          {
  44          0xD0C, 0x9AA, 0x9AA, 0x9AA, 0xAAD, 0xAAD, 0xAAD, 0xBD0,
  45          0xBD0, 0xBD0, 0x9AA, 0xAAD, 0xBD0, 0xD0C, 0xD0C, 0xD0C
  46          };
  47          code u16 SendDtmfHighArr[]=
  48          {
  49          0x1285,0x10C3,0x1285,0x147A,0x10C3,0x1285,0x147A,0x10C3,
  50          0x1285,0x147A,0x16A4,0x16A4,0x16A4,0x16A4,0x10C3,0x147A
  51          };
  52          
  53          /*-------------------------------------------------------------------------
  54          *函数：BK_Read_Reg  寄存器读出
C51 COMPILER V9.52.0.0   KB4815                                                            06/02/2018 10:26:51 PAGE 2   

  55          *参数：reg 寄存器地址  
  56          *返回值：无
  57          *-------------------------------------------------------------------------*/
  58          u16 BK_Read_Reg(u8 reg)
  59          {
  60   1        u8 i;
  61   1        u16 dat;  
  62   1        reg <<= 1;
  63   1        reg |= 0x01;  //读的地址
  64   1        BK4815_SCK = 0;
  65   1        BK4815_SCN = 0;  
  66   1        for(i=0; i<8; i++)
  67   1        {
  68   2          if(reg & 0x80) OUT_BK4815_SDA = 1;
  69   2          else OUT_BK4815_SDA = 0;
  70   2          BK4815_SCK = 1;
  71   2          BK4815_SCK = 0;
  72   2          reg <<= 1;
  73   2        }
  74   1        KB4815_SDA_ToInt
  75   1        for(i=0; i<16; i++)
  76   1        {
  77   2          dat <<= 1;    
  78   2          dat |= IN_BK4815_SDA; 
  79   2          BK4815_SCK = 1;
  80   2          BK4815_SCK = 0;
  81   2        }
  82   1             
  83   1        BK4815_SCN = 1; 
  84   1        KB4815_SDA_ToOut
  85   1        return dat;
  86   1      }
  87          /*-------------------------------------------------------------------------
  88          *函数：BK_Write_Reg  写入寄存器
  89          *参数：reg 寄存器地址  dat 写入的值 
  90          *返回值：无
  91          *-------------------------------------------------------------------------*/
  92          void BK_Write_Reg(u8 reg, u16 dat)
  93          {
  94   1        u8 i; 
  95   1        reg <<= 1;   //写的地址
  96   1      
  97   1        BK4815_SCK = 0;
  98   1        BK4815_SCN = 0;   
  99   1        
 100   1        for(i=0; i<8; i++)
 101   1        {
 102   2          if(reg & 0x80) OUT_BK4815_SDA = 1;
 103   2          else OUT_BK4815_SDA = 0;
 104   2          BK4815_SCK = 1;
 105   2          BK4815_SCK = 0;
 106   2          reg <<= 1;
 107   2        }
 108   1        for(i=0; i<16; i++)
 109   1        {
 110   2          if(dat & 0x8000) OUT_BK4815_SDA = 1;
 111   2          else OUT_BK4815_SDA = 0;
 112   2          BK4815_SCK = 1;
 113   2          BK4815_SCK = 0;
 114   2          dat <<= 1;
 115   2        }
 116   1        BK4815_SCN = 1; 
C51 COMPILER V9.52.0.0   KB4815                                                            06/02/2018 10:26:51 PAGE 3   

 117   1      }
 118          void BK_Ramp_Table_Init()
 119          {
 120   1        u8 i;
 121   1        for(i=0;i<64;i++)
 122   1          BK_Write_Reg(42,ramp_table[i]);
 123   1      }
 124          void initReg01_19()
 125          {
 126   1        u8 i;
 127   1        for(i=0; i<19; i++)
 128   1        {
 129   2          BK_Write_Reg(i+1, reg0_19[i]);  
 130   2        }
 131   1      }
 132          /*-------------------------------------------------------------------------
 133          *函数：initKB4815  4815初使化设置
 134          *参数：无
 135          *返回值：无
 136          *-------------------------------------------------------------------------*/
 137          void initBK4815(void)
 138          { 
 139   1        u8 i;
 140   1        u16 val=0;  
 141   1        BK4815_SCN = 1; 
 142   1        delayus(2);
 143   1        BK4815_SCN = 1;
 144   1        delayms(1);
 145   1        
 146   1        BK_Write_Reg(117,0x0492);                 //RX Audio:SelCall    GPIO1 :Output low
 147   1        IDLE
 148   1        delayms(500);
 149   1        BK_Write_Reg(12,0xfbab);                   //
 150   1        delayus(5);
 151   1        BK_Write_Reg(115, 0x8400);//updated           //DTMF interrupt
 152   1          BK_Write_Reg(116, 0x0000);//updated
 153   1        for(i=1;i<=15;i++)
 154   1        {
 155   2          g_reg0_15_buff[i]=reg0_19[i];
 156   2          BK_Write_Reg(i, g_reg0_15_buff[i]);
 157   2        }
 158   1        //for(i=0;i<64;i++)
 159   1        //  BK_Write_Reg(42,ramp_table[i]);
 160   1        
 161   1        BK_Ramp_Table_Init();
 162   1        initReg01_19();
 163   1        BK_Write_Reg(16, 0x88f9);//0x3684:IF=88K,0x4B80: IF=121.875kHz, 0x05CF: IF=9.375kHz
 164   1        BK_Write_Reg(17, 0x5800);//updated 4812
 165   1        BK_Write_Reg(18, 0x415c);//updated 4812
 166   1        BK_Write_Reg(19, 0x08a0);//updated 4812
 167   1        BK_Write_Reg(20, 0x0000);//updated
 168   1      
 169   1        BK_Write_Reg(21, 0x002e);
 170   1        BK_Write_Reg(22, 0x3200);//updated
 171   1        //BK_Write_Reg(23, 0x0000);//updated
 172   1        BK_Write_Reg(24, 0x086c);
 173   1        BK_Write_Reg(25, 0x13ba);
 174   1        BK_Write_Reg(26, 0x0000);
 175   1        //BK_Write_Reg(27, 0x0000);
 176   1        BK_Write_Reg(28, 0x0000);
 177   1        BK_Write_Reg(29, 0x0000);
 178   1        BK_Write_Reg(30, 0x0000);
C51 COMPILER V9.52.0.0   KB4815                                                            06/02/2018 10:26:51 PAGE 4   

 179   1      
 180   1        BK_Write_Reg(31, 0x0000);
 181   1        BK_Write_Reg(32, 0x0000);
 182   1        BK_Write_Reg(33, 0x0000);
 183   1        BK_Write_Reg(34, 0x0740);
 184   1        BK_Write_Reg(35, 0x0000);
 185   1        BK_Write_Reg(36, 0x8000);//updated
 186   1        BK_Write_Reg(37, 0x04D5);//updated
 187   1        BK_Write_Reg(38, 0xE000);//updated,bit13  0: 23 bits CDCSS,1: 24 bits CDCSS ,121203
 188   1        BK_Write_Reg(39, 0x0013);//updated
 189   1        BK_Write_Reg(40, 0x8820);//updated
 190   1      
 191   1        BK_Write_Reg(41, 0x2050);
 192   1        //BK_Write_Reg(42, 0x0000);//updated
 193   1        BK_Write_Reg(43, 0x403F);//updated
 194   1        BK_Write_Reg(44, 0x8a2e);//updated 4812
 195   1        BK_Write_Reg(45, 0x1b80);//updated 4812
 196   1        BK_Write_Reg(46, 0x0000);
 197   1        BK_Write_Reg(47, 0x0000);
 198   1      
 199   1              BK_Write_Reg(48, 0x6c0d);
 200   1              BK_Write_Reg(49, 0xd1d5);
 201   1              BK_Write_Reg(50, 0xf717);
 202   1              BK_Write_Reg(51, 0x0735);
 203   1              BK_Write_Reg(52, 0x6d72);
 204   1              BK_Write_Reg(53, 0xcd0b);
 205   1              BK_Write_Reg(54, 0xddac);
 206   1              BK_Write_Reg(55, 0x15d8);
 207   1              BK_Write_Reg(56, 0x6f82);
 208   1              BK_Write_Reg(57, 0xc723);
 209   1              BK_Write_Reg(58, 0xc7a5);
 210   1              BK_Write_Reg(59, 0x2206);
 211   1              BK_Write_Reg(60, 0x721b);
 212   1              BK_Write_Reg(61, 0xc235);
 213   1              BK_Write_Reg(62, 0x1100);
 214   1              BK_Write_Reg(63, 0x0000);
 215   1      
 216   1              
 217   1              
 218   1              
 219   1        BK_Write_Reg(64, 0x8000);
 220   1        BK_Write_Reg(65, 0xc000);
 221   1        BK_Write_Reg(66, 0xd083);//updated
 222   1        BK_Write_Reg(67, 0x2000);//updated
 223   1        BK_Write_Reg(68, 0x8000);
 224   1        BK_Write_Reg(69, 0x27FF);//updated
 225   1        BK_Write_Reg(70, 0x40fe);
 226   1      
 227   1        BK_Write_Reg(71, 0x0a18);//updated
 228   1        BK_Write_Reg(72, 0xe002);//updated
 229   1        BK_Write_Reg(73, 0x1a00);//updated
 230   1        BK_Write_Reg(74, 0x0000);//updated
 231   1        BK_Write_Reg(75, 0x7a80);
 232   1        BK_Write_Reg(76, 0xE204);
 233   1        BK_Write_Reg(77, 0x0000);
 234   1        BK_Write_Reg(78, 0x0000);
 235   1        BK_Write_Reg(79, 0x0000);
 236   1        BK_Write_Reg(80, 0x0000);
 237   1      
 238   1        BK_Write_Reg(81, 0xB200);
 239   1        BK_Write_Reg(82, 0x0000);
 240   1        BK_Write_Reg(83, 0x8000);
C51 COMPILER V9.52.0.0   KB4815                                                            06/02/2018 10:26:51 PAGE 5   

 241   1        BK_Write_Reg(84, 0xFC40);
 242   1        BK_Write_Reg(85, 0x70a6);
 243   1        BK_Write_Reg(86, 0x0000);
 244   1        BK_Write_Reg(87, 0x0000);
 245   1        BK_Write_Reg(88, 0x0000);
 246   1        BK_Write_Reg(89, 0xff81);//updated
 247   1        BK_Write_Reg(90, 0x7D26);//updated
 248   1        
 249   1        BK_Write_Reg(91, 0x0000);//updated
 250   1        BK_Write_Reg(92, 0x0000);//updated
 251   1        BK_Write_Reg(93, 0x0000);
 252   1        BK_Write_Reg(94, 0x00e8);//updated
 253   1        BK_Write_Reg(95, 0x0237);
 254   1        BK_Write_Reg(96, 0x0080);
 255   1        BK_Write_Reg(97, 0x0000);
 256   1        BK_Write_Reg(98, 0x0005);
 257   1        BK_Write_Reg(99, 0x0000);
 258   1        BK_Write_Reg(100, 0x0080);
 259   1      
 260   1        BK_Write_Reg(101, 0x0000);
 261   1        BK_Write_Reg(102, 0x0000);
 262   1        BK_Write_Reg(103, 0x431f);
 263   1        BK_Write_Reg(104, 0x0000);
 264   1        BK_Write_Reg(105, 0x0000);
 265   1        BK_Write_Reg(106, 0xcc31);//Firmware Version
 266   1        BK_Write_Reg(107, 0x3415);
 267   1        BK_Write_Reg(108, 0x6927);//updated
 268   1        BK_Write_Reg(109, 0x4600);//updated
 269   1        BK_Write_Reg(110, 0x0000);//updated,121203
 270   1      
 271   1        BK_Write_Reg(111, 0x0000);
 272   1        BK_Write_Reg(112, 0xA000);//updated
 273   1        BK_Write_Reg(113, 0x893b);//updated
 274   1        BK_Write_Reg(114, 0x91b9);//updated
 275   1        
 276   1      
 277   1        BK_Write_Reg(117, 0x0408);//updated           //DTMF
 278   1        //BK_Write_Reg(118, 0x0400);
 279   1        BK_Write_Reg(119, 0x02b4);
 280   1        BK_Write_Reg(120, 0x1103);
 281   1      
 282   1        BK_Write_Reg(121, 0x2014);
 283   1        BK_Write_Reg(122, 0x46a3 );
 284   1        BK_Write_Reg(123, 0x0002);//updated
 285   1        BK_Write_Reg(124, 0xf3ac);//updated
 286   1        BK_Write_Reg(125, 0x76b5);
 287   1        BK_Write_Reg(126, 0xfff5);//updated
 288   1        BK_Write_Reg(127, 0x3568);//updated
 289   1      
 290   1      
 291   1      
 292   1        /*---------------------------------宽窄带---------------------------------*/
 293   1        val = BK_Read_Reg(1);
 294   1        val &= 0x7FFF;  
 295   1        if( channel.band== wide)  val |= 0x8000;
 296   1        BK_Write_Reg(1, val); 
 297   1      
 298   1      
 299   1        
 300   1        //BK_DTMF_SET_CODE(mDtmfRecive.dtmfCode[0]);
 301   1        /*---------------------------------VOX设置---------------------------------*/
 302   1        if(channel.isVOXOpen==1)
C51 COMPILER V9.52.0.0   KB4815                                                            06/02/2018 10:26:51 PAGE 6   

 303   1        {
 304   2          val=0;
 305   2          val|=0x8000;
 306   2          val|=(channel.VOXLevel<<6);
 307   2          val|=channel.VOX_Gain_Level;
 308   2          BK_Write_Reg(22,val);
 309   2        } 
 310   1        //BK_DTMF_SET_CODE(mDtmfRecive.dtmfCode[0]);
 311   1      
 312   1        
 313   1      EX1 = 1;                          //使能INT1中断                        //使能INT1中断
 314   1        
 315   1            /*-----------------允许DTMF接收-----------------------*/
 316   1        val=BK_Read_Reg(66);
 317   1        val|=(0x0001<<11);
 318   1        BK_Write_Reg(66,val); 
 319   1      
 320   1        val=BK_Read_Reg(78);
 321   1        val&=0xf000;
 322   1        val|=0x010f;
 323   1        BK_Write_Reg(78,val);
 324   1        
 325   1        val=BK_Read_Reg(115);
 326   1        val|=(0x0001<<10);
 327   1        BK_Write_Reg(115,val);
 328   1        
 329   1      
 330   1          for(i = 0; i < 16; i++)
 331   1        {
 332   2          BK_Write_Reg(77, ((i) << 12) | 
 333   2                 ((1  << 11)) |
 334   2                 RecvDtmfHighArr[i]);
 335   2          
 336   2          BK_Write_Reg(77, ((i) << 12) |
 337   2                 RecvDtmfLowArr[i]);
 338   2        }
 339   1        
 340   1        EnterBK4815RX();
 341   1      }
 342          
 343          /*-------------------------------------------------------------------------
 344          *函数：BK4815Sleep  4815睡眠模式
 345          *参数：无
 346          *返回值：无
 347          *-------------------------------------------------------------------------*/
 348          void BK4815Sleep(void)
 349          {
 350   1        BK_Write_Reg(12,  0xFFFF);
 351   1        OUT_APC = 0;
 352   1        IDLE;
 353   1      }
 354          u16 BK4815RssiAndSnr()
 355          {
 356   1        return (BK_Read_Reg(68)&0x3f7f);
 357   1      }
 358          /*----------------------------------------------------------------
 359            ??:BK_Enable_TX_InbandSignal ??TX???? 
 360            ??:?
 361            ??:?
 362          *----------------------------------------------------------------*/
 363          void BK_Enable_TX_InbandSignal()
 364          {
C51 COMPILER V9.52.0.0   KB4815                                                            06/02/2018 10:26:51 PAGE 7   

 365   1        u16 val = 0;
 366   1        val = BK_Read_Reg(40);
 367   1        val |= 0x8000;
 368   1        
 369   1        BK_Write_Reg(40, val);
 370   1      }
 371          /*----------------------------------------------------------------
 372            ??:BK_Disable_TX_InbandSignal ??TX???? 
 373            ??:
 374            ??:?
 375          *----------------------------------------------------------------*/
 376          void BK_Disable_TX_InbandSignal()
 377          {
 378   1        u16 val = 0;
 379   1        val = BK_Read_Reg(40);
 380   1        val &= 0x7FFF;  
 381   1        BK_Write_Reg(40, val);
 382   1      }
 383          /*-------------------------------------------------------------------------
 384          *函数：BK_DTMF_RX_Read  读DTMF编码
 385          *参数：无
 386          *返回值：DTMF编码
 387          *-------------------------------------------------------------------------*/
 388          u8 BK_DTMF_RX_Read()
 389          {
 390   1        u8 dtmf_addr=0;
 391   1        u16 val=0;
 392   1        val=BK_Read_Reg(78);
 393   1        dtmf_addr=(val>>4)&0x0f;
 394   1        return dtmf_addr;
 395   1      }
 396          /*----------------------------------------------------------------
 397            ??:BK_RX2TX ?????
 398            ??:
 399            ??:?
 400          *----------------------------------------------------------------*/
 401          void BK_RX2TX()
 402          {
 403   1        u16 val;
 404   1        g_reg0_15_buff[12]=0xf823;//reg7<0>=1, High supply LDO
 405   1        BK_Write_Reg(12, g_reg0_15_buff[12]);
 406   1        val=BK_Read_Reg(112);
 407   1        val|=0x2000;
 408   1        BK_Write_Reg(112,0x4000);
 409   1        BK_Write_Reg(112,0xe000);
 410   1        OUT_APC=1;  
 411   1      }
 412          /*----------------------------------------------------------------
 413            ??:BK_TX2RX ?????
 414            ??:
 415            ??:?
 416          *----------------------------------------------------------------*/
 417          void BK_TX2RX()
 418          { 
 419   1        BK_Write_Reg(112,0x0000);
 420   1        BK_Write_Reg(112,0xa000);
 421   1        //val=BK_Read_Reg(112);
 422   1        //val&=0xdfff;
 423   1        //BK_Write_Reg(112,val);
 424   1        g_reg0_15_buff[12]=0x0603;//reg7<0>=1, High supply LDO
 425   1        BK_Write_Reg(12, g_reg0_15_buff[12]);
 426   1        OUT_APC=0;
C51 COMPILER V9.52.0.0   KB4815                                                            06/02/2018 10:26:51 PAGE 8   

 427   1      }
 428          void BK_DTMF_INTERUPT_CLEAR()
 429          {
 430   1        u16 val;
 431   1        
 432   1        
 433   1        val=BK_Read_Reg(116);
 434   1        val|=0x0400;
 435   1        BK_Write_Reg(116,val);
 436   1        val=BK_Read_Reg(78);
 437   1        val&=0xff0f;
 438   1        BK_Write_Reg(78,val);
 439   1      }
 440          /*
 441          void BK_DTMF_SET_CODE(u8 dat)
 442          {
 443            u16 val;
 444            val=BK_Read_Reg(78);
 445            val&=0xfff0;
 446            val|=dat;
 447            BK_Write_Reg(78,val);
 448          }
 449          */
 450          /*-------------------------------------------------------------------------
 451          *??:BK_DTMF_TX  DTMF??
 452          *??:  *buf DTMF??   len ???? 
 453          *???:?
 454          *-------------------------------------------------------------------------*/
 455          void BK_DTMF_TX(u8 buf)
 456          { 
 457   1        u16 val;
 458   1      
 459   1        IDLE;
 460   1        OPEN_TX 
 461   1        val = BK_Read_Reg(40);
 462   1        val &= 0x1FFF;
 463   1        val |= 0x2000;        /* bit14,13 :01 */  //revised 2009.12.09, inband send was enabled in BK_DTMF_TX
 464   1        BK_Write_Reg(40, val);    /* DTMF */  
 465   1        BK_RX2TX();
 466   1        BK_Disable_TX_InbandSignal();
 467   1        OUT_APC=1;
 468   1        BK_Write_Reg(24, SendDtmfLowArr[buf]);
 469   1        BK_Write_Reg(25, SendDtmfHighArr[buf]);
 470   1        BK_Enable_TX_InbandSignal();    
 471   1        delayms(40); /* DelayMs 40ms */
 472   1        BK_Disable_TX_InbandSignal();     
 473   1      
 474   1      }
 475          
 476          u8 isDtmfSendOK() 
 477          {
 478   1        u8 dat;
 479   1        while(PPT_KEY==0)
 480   1        {
 481   2          mRecive=MRECIVE_NONE;   
 482   2          OUT_APC=1;
 483   2          BK_DTMF_INTERUPT_CLEAR();
 484   2          BK_DTMF_TX((mDtmfRecive.dtmfCode&0xf0)>>4);   
 485   2          OUT_APC=0;
 486   2          EnterBK4815RX();    
 487   2          delayms(80);
 488   2          dat=BK_DTMF_RX_Read();
C51 COMPILER V9.52.0.0   KB4815                                                            06/02/2018 10:26:51 PAGE 9   

 489   2          
 490   2          if((dat==(mDtmfRecive.dtmfCode&0x0f))&&(mRecive==MRECIVE_BK4815_INTERUPT))    
 491   2          {
 492   3            mRecive=MRECIVE_NONE;   
 493   3            return 1;
 494   3          } 
 495   2        }
 496   1        return 0;
 497   1      }
 498          
 499          /*-------------------------------------------------------------------------
 500          *函数：StartTx  发射
 501          *参数：无
 502          *返回值：无
 503          *-------------------------------------------------------------------------*/
 504          void StartBK4815TX(void)
 505          { 
 506   1        u16 val = 0;  
 507   1        u16 if_h=0;
 508   1        u16 if_l=0;
 509   1        u32 val1;
 510   1      
 511   1        u8 freqband=0;
 512   1        OUT_APC = 0;
 513   1        IDLE;
 514   1        EN_MIC=0;
 515   1        //SPK_EN=0;
 516   1        OPEN_TX   
 517   1          /*---------------------------------接收频率---------------------------------*/ 
 518   1          g_reg0_15_buff[4]&=0xffe7;
 519   1        if((channel.RX_Freq>=380)&&(channel.RX_Freq<=590)){g_reg0_15_buff[4]|=0x0000;freqband=8; if_l=0x3568;if_h
             -=0xfff5;}
 520   1        else if((channel.RX_Freq>=255)&&(channel.RX_Freq<=394)){g_reg0_15_buff[4]|=0x0100;freqband=12;if_l=0xd01c
             -;if_h=0xffef;}
 521   1        else if((channel.RX_Freq>=192)&&(channel.RX_Freq<=295)){g_reg0_15_buff[4]|=0x0080;freqband=16;if_l=0x6ad0
             -;if_h=0xffea;}
 522   1        else if((channel.RX_Freq>=123)&&(channel.RX_Freq<=187)){g_reg0_15_buff[4]|=0x0180;  freqband=24;if_l=0xa03
             -8;if_h=0xffdf;}
 523   1        BK_Write_Reg(4,g_reg0_15_buff[4]);
 524   1        
 525   1        val1=(u32)(channel.RX_Freq*freqband*(645277.54));
 526   1      
 527   1        BK_Write_Reg(113,(u16)(val1/65536));
 528   1        BK_Write_Reg(114,(u16)(val1%65536));
 529   1        BK_Write_Reg(125,0x76b5);
 530   1        BK_Write_Reg(126,if_h);
 531   1        BK_Write_Reg(127,if_l);
 532   1      
 533   1        delayms(10);
 534   1        
 535   1          val = BK_Read_Reg(40);
 536   1          val &= 0x1FFF;
 537   1          val |= 0x2000;        /* bit14,13 :01 */  //revised 2009.12.09, inband send was enabled in BK_DTMF_TX
 538   1          BK_Write_Reg(40, val);    /* DTMF */
 539   1      
 540   1        
 541   1        
 542   1        
 543   1        BK_Write_Reg(112,0x4000);                //RX TO TX 
 544   1        BK_Write_Reg(112,0xe000);                //RX TO TX 
 545   1        BK_Write_Reg(12, 0xf823);                //TX POWER UP  
 546   1        BK_Write_Reg(109, 0xf700);  //PA output control
C51 COMPILER V9.52.0.0   KB4815                                                            06/02/2018 10:26:51 PAGE 10  

 547   1        if(isDtmfSendOK())
 548   1        {   
 549   2          
 550   2          BK_Write_Reg(44, 0x0017);//updated 4812
 551   2          BK_Write_Reg(17, 0x5800);//updated 4812
 552   2          val = BK_Read_Reg(40);
 553   2            val &= 0x9FFF;
 554   2            val |= 0x8000;        /* inband type bit14,13 :00 */
 555   2            BK_Write_Reg(40, val);    /* Speech */
 556   2          BK_RX2TX();
 557   2          LCD_TX(1);    
 558   2          IDLE;
 559   2          OPEN_TX 
 560   2          if(mCbParam.TxPower==POWER_HIGH)    LCD_STRENGTH(5);  
 561   2              else LCD_STRENGTH(3);       
 562   2          OUT_APC=1;
 563   2          EN_MIC = 1;
 564   2          LED_TX = 1; 
 565   2          EN_MIC=1;
 566   2        }
 567   1        else
 568   1        {
 569   2          EnterBK4815RX();
 570   2        }
 571   1      }
 572          /*-------------------------------------------------------------------------
 573          *函数：EnterRX  接收
 574          *参数：无
 575          *返回值：无
 576          *-------------------------------------------------------------------------*/
 577          void EnterBK4815RX(void)
 578          {
 579   1      
 580   1        u16 val = 0;  
 581   1        u16 if_h=0;
 582   1        u16 if_l=0;
 583   1        u32 val1;
 584   1        u8 freqband=0;
 585   1        OUT_APC = 0;
 586   1        IDLE;
 587   1        EN_MIC=0;
 588   1        OPEN_RX
 589   1          /*---------------------------------接收频率---------------------------------*/ 
 590   1          g_reg0_15_buff[4]&=0xffe7;
 591   1        if((channel.RX_Freq>=380)&&(channel.RX_Freq<=590)){g_reg0_15_buff[4]|=0x0000;freqband=8; if_l=0x3568;if_h
             -=0xfff5;}
 592   1        else if((channel.RX_Freq>=255)&&(channel.RX_Freq<=394)){g_reg0_15_buff[4]|=0x0100;freqband=12;if_l=0xd01c
             -;if_h=0xffef;}
 593   1        else if((channel.RX_Freq>=192)&&(channel.RX_Freq<=295)){g_reg0_15_buff[4]|=0x0080;freqband=16;if_l=0x6ad0
             -;if_h=0xffea;}
 594   1        else if((channel.RX_Freq>=123)&&(channel.RX_Freq<=187)){g_reg0_15_buff[4]|=0x0180;  freqband=24;if_l=0xa03
             -8;if_h=0xffdf;}
 595   1        BK_Write_Reg(4,g_reg0_15_buff[4]);
 596   1        
 597   1        val1=(u32)(channel.RX_Freq*freqband*(645277.54));
 598   1      
 599   1        BK_Write_Reg(113,(u16)(val1/65536));
 600   1        BK_Write_Reg(114,(u16)(val1%65536));
 601   1        BK_Write_Reg(125,0x76b5);
 602   1        BK_Write_Reg(126,if_h);
 603   1        BK_Write_Reg(127,if_l);
 604   1      
C51 COMPILER V9.52.0.0   KB4815                                                            06/02/2018 10:26:51 PAGE 11  

 605   1        delayms(10);
 606   1        
 607   1        BK_Write_Reg(22,  0xB200);  //VOX
 608   1        BK_Write_Reg(90,  0x45F6);  //??
 609   1        BK_Write_Reg(91,  0x2616);  //消尾音亚音频55Hz
 610   1        BK_Write_Reg(92,  0x4001);
 611   1          BK_Write_Reg(109, 0x4600);  //PA output control
 612   1        BK_Write_Reg(112,0xa000);
 613   1      
 614   1        BK_Write_Reg(12, 0x0603);
 615   1      }
 616          
 617          void BK_DTMF_RECIVE()
 618          {
 619   1        uchar dat=0;
 620   1        uchar i=0;  
 621   1        dat=BK_DTMF_RX_Read();
 622   1        if(dat == ((mDtmfRecive.dtmfCode&0xf0)>>4))
 623   1        {
 624   2      
 625   2          delayms(40);
 626   2          BK_DTMF_TX(mDtmfRecive.dtmfCode&0x0f);  
 627   2                
 628   2          mDtmfRecive.DtmfSussece=1;
 629   2          mDtmfRecive.DtmfRecvCount=0;
 630   2          EnterBK4815RX();
 631   2          BK_TX2RX();
 632   2          delayms(80);          
 633   2        }       
 634   1        else
 635   1        {
 636   2          mDtmfRecive.DtmfSussece=0;
 637   2                
 638   2        }
 639   1        BK_DTMF_INTERUPT_CLEAR();
 640   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3468    ----
   CONSTANT SIZE    =    128    ----
   XDATA SIZE       =    249      29
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
