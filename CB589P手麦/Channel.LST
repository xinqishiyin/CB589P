C51 COMPILER V9.52.0.0   CHANNEL                                                           02/09/2018 08:32:31 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE CHANNEL
OBJECT MODULE PLACED IN Channel.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Channel.c LARGE OPTIMIZE(6,SPEED) BROWSE INCDIR(G:\CB589P) DEBUG OBJECTEXTE
                    -ND TABS(2)

line level    source

   1          #include "system.h"
   2          #include "Channel.h"
   3          #include "memory.h"
   4          
   5          
   6          extern u8 *p_EEPROM;
   7          extern Channel            channel;
*** ERROR C129 IN LINE 7 OF Channel.c: missing ';' before 'channel'
   8          extern Param              param;
   9          u8 chan[16];
  10          u8 para[8];
  11          
  12          bit BitIfTrue(char A,int i)
  13          {
  14            if((A&1<<i)!=0)
  15            {
  16              return SET;
  17            }
  18            else return RESET;
  19          }
  20          /*---------------------------------------------
  21          *函数  SetChannel  设置信道
  22          *参数  channelcount 信道编号  dir 发射还是接收  SET 发射 RESET 接收
  23          *返回 无
  24          *---------------------------------------------*/
  25          void GetChannel(u8 channelcount)
  26          {
  27            u8 val, i;
  28            float fre=0;
  29            for(i=0;i<16;i++)
  30            {
  31              chan[i]=*(p_EEPROM+channelcount*16);
  32            } 
  33            //接收频率
  34            val=chan[3];
  35            fre=val/16*100;
  36            fre+=val%16*10;
  37            val=chan[2];
  38            fre+=val/16;
  39            fre+=val%16*0.1;
  40            val=chan[1];
  41            fre+=val/16*0.01;
  42            fre+=val%16*0.001;
  43            val=chan[0];
  44            fre+=val/16*0.0001;
  45            fre+=val%16*0.00001;
  46            channel.RX_Freq=fre;
  47              //发射频率
  48            val=chan[7];
  49            fre=val/16*100;
  50            fre+=val%16*10;
  51            val=chan[6];
  52            fre+=val/16;
  53            fre+=val%16*0.1;
C51 COMPILER V9.52.0.0   CHANNEL                                                           02/09/2018 08:32:31 PAGE 2   

  54            val=chan[5];
  55            fre+=val/16*0.01;
  56            fre+=val%16*0.001;
  57            val=chan[4];
  58            fre+=val/16*0.0001;
  59            fre+=val%16*0.00001;
  60            channel.TX_Freq=fre;
  61            
  62            //接收亚音频
  63            if(chan[9]==0xff)
  64            {
  65              channel.RXCTCStype=NONE;
  66            }
  67            else if(chan[9]/16==8)
  68            {
  69              channel.RXCTCStype=CDCS;
  70              channel.RX_CDCS_Mode=RESET;
  71              channel.RX_CDCSS_Freq=chan[9]%16*100+chan[8]/16*10+chan[8]%16;
  72            }
  73            else if(chan[9]/16==12)
  74            {
  75              channel.RXCTCStype=CDCS;
  76              channel.RX_CDCS_Mode=SET;
  77              channel.RX_CDCSS_Freq=chan[9]%16*100+chan[8]/16*10+chan[8]%16;
  78            }
  79            else 
  80            {
  81              channel.RXCTCStype=CTCS;  
  82              channel.RX_CTCSS_Freq=chan[9]/16*100+chan[9]%16*10+chan[8]/16+chan[8]%16*0.1;
  83            }
  84             //发射亚音频
  85            if(chan[11]==0xff)
  86            {
  87              channel.RXCTCStype=NONE;
  88            }
  89            else if(chan[11]/16==8)
  90            {
  91              channel.RXCTCStype=CDCS;
  92              channel.RX_CDCS_Mode=RESET;
  93              channel.RX_CDCSS_Freq=chan[11]%16*100+chan[10]/16*10+chan[10]%16;
  94            }
  95            else if(chan[11]/16==12)
  96            {
  97              channel.RXCTCStype=CDCS;
  98              channel.RX_CDCS_Mode=SET;
  99              channel.RX_CDCSS_Freq=chan[11]%16*100+chan[10]/16*10+chan[10]%16;
 100            }
 101            else 
 102            {
 103              channel.RXCTCStype=CTCS;  
 104              channel.RX_CTCSS_Freq=chan[11]/16*100+chan[11]%16*10+chan[10]/16+chan[10]%16*0.1;
 105            }
 106            //扫描添加
 107            if(BitIfTrue(chan[11],4)==SET)channel.ScanAdd=RESET;
 108            else channel.ScanAdd=SET;
 109            
 110            //宽窄带
 111            if(BitIfTrue(chan[11],2)==SET)channel.band=narrow;
 112            else channel.band=wide;
 113            //忙锁
 114            if(BitIfTrue(chan[11],0)==SET)channel.Bussy_Lock=RESET;
 115            else channel.Bussy_Lock=SET;
C51 COMPILER V9.52.0.0   CHANNEL                                                           02/09/2018 08:32:31 PAGE 3   

 116            //扰频？  scramble
 117            
 118            //压扩？  comprass
 119            //PPTID？ 
 120          }
 121          
 122          void GetParam()
 123          {
 124            u8  i;
 125           
 126             for(i=0;i<8;i++)
 127            {
 128              para[i]=*(p_EEPROM+0x0200);
 129            }
 130            //电池省电
 131            if(BitIfTrue(para[0],1)==SET) param.Power_Save=SET;
 132            else param.Power_Save=RESET;
 133            
 134            //哔音
 135            //扫描载波
 136            //PPID
 137            
 138            //静噪等级
 139            param.Sqleve=para[1];
 140            
 141            //发射超时
 142            if(para[2]!=0)  
 143            {
 144              param.TX_Limit_Time=para[2];
 145              param.TX_Limit_Time_on=SET;
 146            }
 147            else param.TX_Limit_Time_on=RESET;
 148            
 149            //声控等级
 150            if(para[3]==0)
 151            {
 152              param.VoxOn=RESET;
 153            }
 154            else
 155            {
 156              param.VoxOn=SET;
 157              param.Voxleve=para[3];
 158            }
 159            
 160            //声控延迟
 161            
 162          }

C51 COMPILATION COMPLETE.  0 WARNING(S),  1 ERROR(S)
