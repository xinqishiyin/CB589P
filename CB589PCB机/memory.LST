C51 COMPILER V9.52.0.0   MEMORY                                                            06/01/2018 15:43:51 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE MEMORY
OBJECT MODULE PLACED IN memory.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE memory.c LARGE OPTIMIZE(6,SPEED) BROWSE INCDIR(G:\CB589P) DEBUG OBJECTEXTEN
                    -D TABS(2)

line level    source

   1          #include"system.h"
   2          #include"at24c08.h"
   3          #include"memory.h"
   4          
   5          #include"KB4815.h"
   6          #include "XN31202.H"
   7          #include "vco.h"
   8          #include "event.h"
   9          extern tCbParam   mCbParam;
  10          extern tSqParam   mSqParam;
  11          
  12          
  13          
  14          /*--------EEPROM中读出的数据----------*/
  15          extern Channel channel;
  16          
  17          
  18          /*--------------------------------------------*/
  19          
  20          
  21          /*-------------------------------------------------------------------------
  22          *函数：saveData  保存数据
  23          *参数：addr 地址  数据  
  24          *返回值：无
  25          *-------------------------------------------------------------------------*/
  26          void saveData(u16 addr, u8 dat)
  27          {
  28   1        u8 page;
  29   1      
  30   1        page = addr/256;
  31   1        switch(page)
  32   1        {
  33   2          case 0:page = AT24C08_PAGE0;break;
  34   2          case 1:page = AT24C08_PAGE1;break;
  35   2          case 2:page = AT24C08_PAGE2;break;
  36   2          case 3:page = AT24C08_PAGE3;break;
  37   2        }
  38   1      
  39   1        EA = 0;
  40   1        eepromWriteByte(page,addr%256,dat);
  41   1        EA = 1; 
  42   1      }
  43          
  44          /*-------------------------------------------------------------------------
  45          *函数：loadData  读取数据
  46          *参数：addr 地址   
  47          *返回值：数据
  48          *-------------------------------------------------------------------------*/
  49          unsigned char loadData(u16 addr)
  50          {
  51   1        u8 dat,page;
  52   1      
  53   1        page = addr/256;
  54   1        switch(page)
C51 COMPILER V9.52.0.0   MEMORY                                                            06/01/2018 15:43:51 PAGE 2   

  55   1        {
  56   2          case 0:page = AT24C08_PAGE0;break;
  57   2          case 1:page = AT24C08_PAGE1;break;
  58   2          case 2:page = AT24C08_PAGE2;break;
  59   2          case 3:page = AT24C08_PAGE3;break;
  60   2        }
  61   1      
  62   1        EA = 0;
  63   1        dat = eepromReadByte(page,addr%256);
  64   1        EA = 1; 
  65   1        return dat; 
  66   1      }
  67          
  68          
  69          /*-------------------------------------------------------------------------
  70          *函数：saveAllParam  保存功能信息
  71          *参数：无   
  72          *返回值：无
  73          *-------------------------------------------------------------------------*/
  74          void saveAllParam(void)
  75          { 
  76   1        u32 fre=(u32)(channel.RX_Freq*1000);
  77   1        saveData(EEP_BASE,0xa5);
  78   1        saveData(EEP_FREQ_CAL,mCbParam.FreqCal);
  79   1        saveData(EEP_COUNTRY,mCbParam.Country);       
  80   1        saveData(EEP_BAND,mCbParam.Band);   
  81   1        saveData(EEP_CHANNEL,mCbParam.Channel);   
  82   1        saveData(EEP_MODU,mCbParam.Modu);   
  83   1        saveData(EEP_POWER,mCbParam.TxPower);   
  84   1        saveData(EEP_RFG,mCbParam.RfgLevel);      
  85   1        saveData(EEP_VOL,mCbParam.VolLevel);  
  86   1        
  87   1        saveData(EEP_IS_ASQ,mSqParam.IsAsq);    
  88   1        saveData(EEP_SQ_LEVEL,mSqParam.SqLevel);      
  89   1        saveData(EEP_ASQ_LEVEL,mSqParam.AsqLevel);      
  90   1        saveData(EEP_DTMF,mDtmfRecive.dtmfCode);
  91   1        saveData(EEP_FRE,(u8)(fre>>24));
  92   1        saveData(EEP_FRE+1,(u8)((fre&0x00ff0000)>>16));
  93   1        saveData(EEP_FRE+2,(u8)((fre&0x0000ff00)>>8));
  94   1        saveData(EEP_FRE+3,(u8)(fre&0x000000ff));
  95   1      
  96   1        
  97   1      }
  98          void saveSQSet()
  99          {
 100   1        u8 i;
 101   1        for(i=0;i<28;i++)
 102   1        {
 103   2          saveData(EEP_SQ_OPEN_SET+i,mSqParam.SqOpenSet[i]);
 104   2          saveData(EEP_SQ_CLOSE_SET+i,mSqParam.SqCloseSet[i]);
 105   2        } 
 106   1        
 107   1        saveData(EEP_ASQ_OPEN_SET,mSqParam.AsqOpenSet[0]);
 108   1        saveData(EEP_ASQ_OPEN_SET+1,mSqParam.AsqOpenSet[1]);
 109   1        saveData(EEP_ASQ_OPEN_SET+2,mSqParam.AsqOpenSet[2]);
 110   1        saveData(EEP_ASQ_OPEN_SET+3,mSqParam.AsqOpenSet[3]);
 111   1        saveData(EEP_ASQ_OPEN_SET+4,mSqParam.AsqOpenSet[4]);
 112   1        saveData(EEP_ASQ_OPEN_SET+5,mSqParam.AsqOpenSet[5]);
 113   1        
 114   1        saveData(EEP_ASQ_CLOSE_SET,mSqParam.AsqCloseSet[0]);
 115   1        saveData(EEP_ASQ_CLOSE_SET+1,mSqParam.AsqCloseSet[1]);
 116   1        saveData(EEP_ASQ_CLOSE_SET+2,mSqParam.AsqCloseSet[2]);
C51 COMPILER V9.52.0.0   MEMORY                                                            06/01/2018 15:43:51 PAGE 3   

 117   1        saveData(EEP_ASQ_CLOSE_SET+3,mSqParam.AsqCloseSet[3]);
 118   1        saveData(EEP_ASQ_CLOSE_SET+4,mSqParam.AsqCloseSet[4]);
 119   1        saveData(EEP_ASQ_CLOSE_SET+5,mSqParam.AsqCloseSet[5]);
 120   1        
 121   1      }
 122          
 123          
 124          void saveDtmf()
 125          {
 126   1        u32 fre=(u32)(channel.RX_Freq*1000);
 127   1        saveData(EEP_DTMF,mDtmfRecive.dtmfCode);
 128   1        saveData(EEP_FRE,(u8)(fre>>24));
 129   1        saveData(EEP_FRE+1,(u8)((fre&0x00ff0000)>>16));
 130   1        saveData(EEP_FRE+2,(u8)((fre&0x0000ff00)>>8));
 131   1        saveData(EEP_FRE+3,(u8)(fre&0x000000ff));
 132   1        
 133   1      
 134   1      }
 135          void loadToBK4815(void)
 136          {
 137   1        
 138   1      }
 139          /*-------------------------------------------------------------------------
 140          *函数：checkAllParam  验证加载信息
 141          *参数：无   
 142          *返回值：无
 143          *-------------------------------------------------------------------------*/
 144          void checkAllParam(void)
 145          {
 146   1        u8 i;
 147   1        u8 go_flag=1;
 148   1        if(mCbParam.VolLevel > 9) mCbParam.VolLevel = 5;
 149   1        
 150   1        if(mCbParam.RfgLevel > 54)mCbParam.RfgLevel = 54;
 151   1        if(mCbParam.RfgLevel%6 != 0)mCbParam.RfgLevel = 0;
 152   1      
 153   1        if(mCbParam.TxPower > POWER_HIGH)mCbParam.TxPower = POWER_LOW;
 154   1        if((mSqParam.IsAsq != 0) &&(mSqParam.IsAsq != 0x20))mSqParam.IsAsq = 0;
 155   1        if(mSqParam.AsqLevel > 5) mSqParam.AsqLevel = 1;
 156   1        if(mSqParam.SqLevel > 28) mSqParam.SqLevel = 10;
 157   1        if(mSqParam.IsAsq) mCbParam.Sq = mSqParam.AsqLevel | 0x20;
 158   1        else mCbParam.Sq = mSqParam.SqLevel;
 159   1        
 160   1        
 161   1        mCbParam.UartTxBuf[0] = 0xFE;
 162   1        mCbParam.FreqCal = 110;
 163   1        for(i=0;i<28;i++)
 164   1        {
 165   2          if(mSqParam.SqOpenSet[i]>20||mSqParam.SqOpenSet[i]<-20)
 166   2          {
 167   3            mSqParam.SqOpenSet[i]=0;
 168   3          } 
 169   2          if(mSqParam.SqCloseSet[i]>20||mSqParam.SqCloseSet[i]<-20)
 170   2          {
 171   3            mSqParam.SqCloseSet[i]=0;
 172   3          }   
 173   2        
 174   2        }
 175   1        for(i=0;i<5;i++)
 176   1        {
 177   2          if(mSqParam.AsqOpenSet[i]>20||mSqParam.AsqOpenSet[i]<-20)
 178   2          {
C51 COMPILER V9.52.0.0   MEMORY                                                            06/01/2018 15:43:51 PAGE 4   

 179   3            mSqParam.AsqOpenSet[i]=0;
 180   3          } 
 181   2          if(mSqParam.AsqCloseSet[i]>20||mSqParam.AsqCloseSet[i]<-20)
 182   2          {
 183   3            mSqParam.AsqCloseSet[i]=0;
 184   3          } 
 185   2      
 186   2        }
 187   1        
 188   1      }
 189          
 190          
 191          /*-------------------------------------------------------------------------
 192          *函数：setDefaultParam  默认设置
 193          *参数：无   
 194          *返回值：无
 195          *-------------------------------------------------------------------------*/
 196          void setDefaultParam(void)
 197          {
 198   1       u8 i;
 199   1        //mCbParam.FreqCal = loadData(EEP_FREQ_CAL);
 200   1      
 201   1        mCbParam.Country = COUNTRY_EU;
 202   1        mCbParam.Band = 0;
 203   1        mCbParam.Channel = 9;
 204   1        mCbParam.Modu = FM;
 205   1        mCbParam.RfgLevel = 0;
 206   1        mCbParam.TxPower = POWER_LOW;
 207   1        mCbParam.VolLevel = 5;
 208   1        channel.RX_Freq=200.015;
 209   1        mSqParam.IsAsq = 0x00;
 210   1        mSqParam.AsqLevel = 3;
 211   1        mSqParam.SqLevel = 10;
 212   1        mCbParam.Sq = (mSqParam.AsqLevel | mSqParam.IsAsq); 
 213   1        mDtmfRecive.dtmfCode=10;
 214   1      
 215   1        
 216   1      for(i=0;i<28;i++)
 217   1      {
 218   2        mSqParam.SqOpenSet[i]=0;
 219   2        mSqParam.SqCloseSet[i]=0;
 220   2      }
 221   1        
 222   1        mSqParam.AsqOpenSet[0]=0;
 223   1        mSqParam.AsqOpenSet[1]=0;
 224   1        mSqParam.AsqOpenSet[2]=0;
 225   1        mSqParam.AsqOpenSet[3]=0;
 226   1        mSqParam.AsqOpenSet[4]=0;
 227   1        mSqParam.AsqCloseSet[0]=0;
 228   1        mSqParam.AsqCloseSet[1]=0;
 229   1        mSqParam.AsqCloseSet[2]=0;
 230   1        mSqParam.AsqCloseSet[3]=0;
 231   1        mSqParam.AsqCloseSet[4]=0;
 232   1        
 233   1      
 234   1      }
 235          
 236          
 237          /*-------------------------------------------------------------------------
 238          *函数：loadAllParam  加载功能信息
 239          *参数：无   
 240          *返回值：无
C51 COMPILER V9.52.0.0   MEMORY                                                            06/01/2018 15:43:51 PAGE 5   

 241          *-------------------------------------------------------------------------*/
 242          void loadAllParam(void)
 243          {
 244   1        
 245   1        u8 i;
 246   1        u32 fre=0;
 247   1        u8 ddt=loadData(EEP_BASE);
 248   1        if(loadData(EEP_BASE) != 0xa5)
 249   1        {
 250   2          setDefaultParam();
 251   2          saveAllParam();
 252   2          saveSQSet();
 253   2        }
 254   1        else
 255   1        {
 256   2          
 257   2          mCbParam.FreqCal = loadData(EEP_FREQ_CAL);
 258   2          
 259   2          mCbParam.Band = loadData(EEP_BAND);
 260   2          mCbParam.Channel = loadData(EEP_CHANNEL);
 261   2          mCbParam.Modu = loadData(EEP_MODU);
 262   2          mCbParam.RfgLevel = loadData(EEP_RFG);
 263   2          mCbParam.TxPower = loadData(EEP_POWER);
 264   2          mCbParam.VolLevel = loadData(EEP_VOL);
 265   2          mCbParam.Country=loadData(EEP_COUNTRY);
 266   2          
 267   2          mSqParam.IsAsq = loadData(EEP_IS_ASQ);
 268   2          mSqParam.AsqLevel = loadData(EEP_ASQ_LEVEL);
 269   2          mSqParam.SqLevel = loadData(EEP_SQ_LEVEL);
 270   2          if(mSqParam.IsAsq == 1)mCbParam.Sq = (mSqParam.AsqLevel | mSqParam.IsAsq);
 271   2          else mCbParam.Sq = mSqParam.SqLevel;
 272   2          mDtmfRecive.dtmfCode=loadData(EEP_DTMF);
 273   2          
 274   2          fre=(((u32)loadData(EEP_FRE))<<24)|(((u32)loadData(EEP_FRE+1))<<16)|(((u32)loadData(EEP_FRE+2))<<8)|((u3
             -2)loadData(EEP_FRE+3));
 275   2          channel.RX_Freq=((float)fre/1000);
 276   2          
 277   2          for(i=0;i<28;i++)
 278   2          {
 279   3            mSqParam.SqOpenSet[i]=loadData(EEP_SQ_OPEN_SET+i);
 280   3            mSqParam.SqCloseSet[i]=loadData(EEP_SQ_CLOSE_SET+i);
 281   3          }
 282   2          
 283   2          mSqParam.AsqOpenSet[0]=loadData(EEP_ASQ_OPEN_SET);
 284   2          mSqParam.AsqOpenSet[1]=loadData(EEP_ASQ_OPEN_SET+1);
 285   2          mSqParam.AsqOpenSet[2]=loadData(EEP_ASQ_OPEN_SET+2);
 286   2          mSqParam.AsqOpenSet[3]=loadData(EEP_ASQ_OPEN_SET+3);
 287   2          mSqParam.AsqOpenSet[4]=loadData(EEP_ASQ_OPEN_SET+4);
 288   2          mSqParam.AsqOpenSet[5]=loadData(EEP_ASQ_OPEN_SET+5);
 289   2          
 290   2          mSqParam.AsqCloseSet[0]=loadData(EEP_ASQ_CLOSE_SET);
 291   2          mSqParam.AsqCloseSet[1]=loadData(EEP_ASQ_CLOSE_SET+1);
 292   2          mSqParam.AsqCloseSet[2]=loadData(EEP_ASQ_CLOSE_SET+2);
 293   2          mSqParam.AsqCloseSet[3]=loadData(EEP_ASQ_CLOSE_SET+3);
 294   2          mSqParam.AsqCloseSet[4]=loadData(EEP_ASQ_CLOSE_SET+4);
 295   2          mSqParam.AsqCloseSet[5]=loadData(EEP_ASQ_CLOSE_SET+5);
 296   2      
 297   2        }
 298   1        checkAllParam();
 299   1      
 300   1      }
 301          
C51 COMPILER V9.52.0.0   MEMORY                                                            06/01/2018 15:43:51 PAGE 6   

 302          void Power_On_Rx()
 303          {             
 304   1                
 305   1            Set_XN31202(0x02c4,14);
 306   1            Set_XN31202(0x3000 + (EXTERNAL_CRYSTAL/mReferenceFreq/2),14);
 307   1            mFlag.Mute=0;
 308   1            calculateFreq();
 309   1            if(mCbParam.Country==COUNTRY_UK) 
 310   1            {
 311   2              setFrqCal(mCbParam.FreqCal+170);    
 312   2            }
 313   1            else
 314   1            {
 315   2              setFrqCal(mCbParam.FreqCal);    
 316   2            }
 317   1            setSQ();
 318   1            //setVol();
 319   1            setPower();
 320   1            setModulation();
 321   1            Set_Mute();
 322   1            //setEmission(0);
 323   1            saveAllParam();
 324   1      }
 325          /*-------------------------------------------------------------------------
 326          *函数：initMemory  初使加载功能信息
 327          *参数：无   
 328          *返回值：无
 329          *-------------------------------------------------------------------------*/
 330          void initMemory(void)
 331          {
 332   1        initAt24c08();
 333   1        
 334   1        setDefaultParam();
 335   1          saveAllParam();
 336   1          saveSQSet();
 337   1        
 338   1        loadAllParam();
 339   1         Power_On_Rx();
 340   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1961    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      16
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
