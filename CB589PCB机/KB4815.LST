C51 COMPILER V9.52.0.0   KB4815                                                            06/01/2018 15:43:47 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE KB4815
OBJECT MODULE PLACED IN KB4815.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE KB4815.c LARGE OPTIMIZE(6,SPEED) BROWSE INCDIR(G:\CB589P) DEBUG OBJECTEXTEN
                    -D TABS(2)

line level    source

   1          #include "system.h"
   2          #include "KB4815.h"
   3          
   4          /*--------设置参数结构体----------------*/
   5          Channel channel;
   6          u8 rexci[20];
   7          u8 reccount=0;
   8          u8 recivecode[1]={1};
   9          
  10          /*--------------全局变量-------------------------*/
  11          u16 g_reg0_15_buff[16];
  12          u16 xdata reg0_19[]=
  13          {
  14            0x0044,0x0019,0x0027,0xB641,0xF770,
  15            0xF274,0x08F0,0xFF33,0xC3FA,0xA2A3,
  16            0x8800,0x0603,0x03FD,0x5817,0x9091,
  17            0x88F9,0x5800,0x415C,0x08A0,
  18          };
  19          u16 xdata ramp_table[]=
  20          {
  21            0x0000,0x0420,0x083F,0x0C5E,0x107C,0x149A,0x18B7,0x1CD4,
  22            0x20F0,0x250B,0x2927,0x2D41,0x315C,0x3575,0x398F,0x3DA7,
  23            0x41C0,0x45D7,0x49EF,0x4E05,0x521B,0x5631,0x5A46,0x5E5B,
  24            0x626F,0x6683,0x6A96,0x6EA9,0x72BB,0x76CD,0x7ADE,0x7EEF,
  25            0x82FF,0x870F,0x8B1E,0x8F2D,0x933B,0x9749,0x9B56,0x9F63,
  26            0xA36F,0xA77B,0xAB86,0xAF91,0xB39B,0xB7A5,0xBBAE,0xBFB7,
  27            0xC3BF,0xC7C7,0xCBCE,0xCFD5,0xD3DB,0xD7E1,0xDBE6,0xDFEB,
  28            0xE3EF,0xE7F3,0xEBF6,0xEFF9,0xF3FB,0xF7FD,0xFBFE,0xFFFF
  29          };
  30          code u16 RecvDtmfLowArr[]= 
  31          {
  32          0x3ab, 0x2B8, 0x2B8, 0x2B8, 0x301, 0x301, 0x301, 0x353, 
  33          0x353, 0x353, 0x2B8, 0x301, 0x353, 0x3AB, 0x3AB, 0x3AB
  34          };
  35          code u16 RecvDtmfHighArr[]=
  36          {
  37          0x536, 0x4B7, 0x536, 0x5C2, 0x4B7, 0x536, 0x5C2, 0x4B7,
  38          0x536, 0x5C2, 0x65E, 0x65E, 0x65E, 0x65E, 0x4B7, 0x5C2
  39          };
  40          code u16 SendDtmfLowArr[]= 
  41          {
  42          0xD0C, 0x9A9, 0x9A9, 0x9A9, 0xAAD, 0xAAD, 0xAAD, 0xBD0,
  43          0xBD0, 0xBD0, 0x9A9, 0xAAD, 0xBD0, 0xD0C, 0xD0C, 0xD0C
  44          };
  45          code u16 SendDtmfHighArr[]=
  46          {
  47          0x1285,0x10C3,0x1285,0x147A,0x10C3,0x1285,0x147A,0x10C3,
  48          0x1285,0x147A,0x16A4,0x16A4,0x16A4,0x16A4,0x10C3,0x147A
  49          };
  50          
  51          /*-------------------------------------------------------------------------
  52          *函数：SetBK4815Pragram  BK4815初使化参数
  53          *参数：无  
  54          *返回值：无
C51 COMPILER V9.52.0.0   KB4815                                                            06/01/2018 15:43:47 PAGE 2   

  55          *-------------------------------------------------------------------------*/
  56          void SetBK4815Pragram()
  57          {
  58   1        channel.band=narrow;
  59   1        channel.isVOXOpen=1;
  60   1        channel.VOXLevel=0x32;
  61   1      
  62   1        
  63   1        mDtmfRecive.DtmfSussece=0;
  64   1        mDtmfRecive.DtmfRecvCount=0;
  65   1      }
  66          
  67          /*-------------------------------------------------------------------------
  68          *函数：BK_Read_Reg  寄存器读出
  69          *参数：reg 寄存器地址  
  70          *返回值：无
  71          *-------------------------------------------------------------------------*/
  72          u16 BK_Read_Reg(u8 reg)
  73          {
  74   1        u8 i;
  75   1        u16 dat;  
  76   1        reg <<= 1;
  77   1        reg |= 0x01;  //读的地址
  78   1        BK4815_SCK = 0;
  79   1        BK4815_SCN = 0;  
  80   1        for(i=0; i<8; i++)
  81   1        {
  82   2          if(reg & 0x80) OUT_BK4815_SDA = 1;
  83   2          else OUT_BK4815_SDA = 0;
  84   2          BK4815_SCK = 1;
  85   2          BK4815_SCK = 0;
  86   2          reg <<= 1;
  87   2        }
  88   1        KB4815_SDA_ToInt
  89   1        for(i=0; i<16; i++)
  90   1        {
  91   2          dat <<= 1;    
  92   2          dat |= IN_BK4815_SDA; 
  93   2          BK4815_SCK = 1;
  94   2          BK4815_SCK = 0;
  95   2        }
  96   1             
  97   1        BK4815_SCN = 1; 
  98   1        KB4815_SDA_ToOut
  99   1        return dat;
 100   1      }
 101          /*-------------------------------------------------------------------------
 102          *函数：BK_Write_Reg  写入寄存器
 103          *参数：reg 寄存器地址  dat 写入的值 
 104          *返回值：无
 105          *-------------------------------------------------------------------------*/
 106          void BK_Write_Reg(u8 reg, u16 dat)
 107          {
 108   1        u8 i; 
 109   1        u8 va=reg;
 110   1        reg <<= 1;   //写的地址
 111   1      
 112   1        BK4815_SCK = 0;
 113   1        BK4815_SCN = 0;   
 114   1        
 115   1        for(i=0; i<8; i++)
 116   1        {
C51 COMPILER V9.52.0.0   KB4815                                                            06/01/2018 15:43:47 PAGE 3   

 117   2          if(reg & 0x80) OUT_BK4815_SDA = 1;
 118   2          else OUT_BK4815_SDA = 0;
 119   2          BK4815_SCK = 1;
 120   2          BK4815_SCK = 0;
 121   2          reg <<= 1;
 122   2        }
 123   1        for(i=0; i<16; i++)
 124   1        {
 125   2          if(dat & 0x8000) OUT_BK4815_SDA = 1;
 126   2          else OUT_BK4815_SDA = 0;
 127   2          BK4815_SCK = 1;
 128   2          BK4815_SCK = 0;
 129   2          dat <<= 1;
 130   2        }
 131   1        BK4815_SCN = 1; 
 132   1      }
 133          void BK_Ramp_Table_Init()
 134          {
 135   1        u8 i;
 136   1        for(i=0;i<64;i++)
 137   1          BK_Write_Reg(42,ramp_table[i]);
 138   1      }
 139          void initReg01_19()
 140          {
 141   1        u8 i;
 142   1        for(i=0; i<19; i++)
 143   1        {
 144   2          BK_Write_Reg(i+1, reg0_19[i]);  
 145   2        }
 146   1      }
 147          /*-------------------------------------------------------------------------
 148          *函数：initKB4815  4815初使化设置
 149          *参数：无
 150          *返回值：无
 151          *-------------------------------------------------------------------------*/
 152          
 153          void initBK4815(void)
 154          {
 155   1        
 156   1        u8 i; 
 157   1        u16 val=0;
 158   1        
 159   1        u8 freqband=0;
 160   1        BK4815_SCN = 1; 
 161   1        delayus(50);
 162   1        BK4815_SCN = 1;
 163   1        delayus(50);
 164   1          reccount=0;
 165   1        IDLE  
 166   1        BK_Write_Reg(117, 0x0492);
 167   1        IDLE
 168   1        delayms(500);
 169   1        BK_Write_Reg(12,  0xFBAB);
 170   1        
 171   1        BK_Write_Reg(115, 0x8400);//updated           //DTMF interrupt
 172   1        
 173   1        BK_Write_Reg(116, 0x0000);//updated
 174   1        for(i=1;i<=15;i++)
 175   1        {
 176   2          g_reg0_15_buff[i]=reg0_19[i];
 177   2          BK_Write_Reg(i, g_reg0_15_buff[i]);
 178   2        }
C51 COMPILER V9.52.0.0   KB4815                                                            06/01/2018 15:43:47 PAGE 4   

 179   1       
 180   1        
 181   1        BK_Ramp_Table_Init();
 182   1        
 183   1          initReg01_19();
 184   1        BK_Write_Reg(16, 0x88f9);//0x3684:IF=88K,0x4B80: IF=121.875kHz, 0x05CF: IF=9.375kHz
 185   1        BK_Write_Reg(17, 0x5800);//updated 4812
 186   1        BK_Write_Reg(18, 0x415c);//updated 4812
 187   1        BK_Write_Reg(19, 0x08a0);//updated 4812
 188   1        BK_Write_Reg(20, 0x0000);//updated
 189   1      
 190   1        BK_Write_Reg(21, 0x002e);
 191   1        BK_Write_Reg(22, 0x3200);//updated
 192   1        //BK_Write_Reg(23, 0x0000);//updated
 193   1        BK_Write_Reg(24, 0x086c);
 194   1        BK_Write_Reg(25, 0x13ba);
 195   1        BK_Write_Reg(26, 0x0000);
 196   1        //BK_Write_Reg(27, 0x0000);
 197   1        BK_Write_Reg(28, 0x0000);
 198   1        BK_Write_Reg(29, 0x0000);
 199   1        BK_Write_Reg(30, 0x0000);
 200   1      
 201   1        BK_Write_Reg(31, 0x0000);
 202   1        BK_Write_Reg(32, 0x0000);
 203   1        BK_Write_Reg(33, 0x0000);
 204   1        BK_Write_Reg(34, 0x0740);
 205   1        BK_Write_Reg(35, 0x0000);
 206   1        BK_Write_Reg(36, 0x8000);//updated
 207   1        BK_Write_Reg(37, 0x04D5);//updated
 208   1        BK_Write_Reg(38, 0xE000);//updated,bit13  0: 23 bits CDCSS,1: 24 bits CDCSS ,121203
 209   1        BK_Write_Reg(39, 0x0013);//updated
 210   1        BK_Write_Reg(40, 0x8820);//updated
 211   1      
 212   1        BK_Write_Reg(41, 0x2050);
 213   1        //BK_Write_Reg(42, 0x0000);//updated
 214   1        BK_Write_Reg(43, 0x403F);//updated
 215   1        BK_Write_Reg(44, 0x8a2e);//updated 4812
 216   1        BK_Write_Reg(45, 0x1b80);//updated 4812
 217   1        BK_Write_Reg(46, 0x0000);
 218   1        BK_Write_Reg(47, 0x0000);
 219   1      
 220   1              BK_Write_Reg(48, 0x6c0d);
 221   1              BK_Write_Reg(49, 0xd1d5);
 222   1              BK_Write_Reg(50, 0xf717);
 223   1              BK_Write_Reg(51, 0x0735);
 224   1              BK_Write_Reg(52, 0x6d72);
 225   1              BK_Write_Reg(53, 0xcd0b);
 226   1              BK_Write_Reg(54, 0xddac);
 227   1              BK_Write_Reg(55, 0x15d8);
 228   1              BK_Write_Reg(56, 0x6f82);
 229   1              BK_Write_Reg(57, 0xc723);
 230   1              BK_Write_Reg(58, 0xc7a5);
 231   1              BK_Write_Reg(59, 0x2206);
 232   1              BK_Write_Reg(60, 0x721b);
 233   1              BK_Write_Reg(61, 0xc235);
 234   1              BK_Write_Reg(62, 0x1100);
 235   1              BK_Write_Reg(63, 0x0000);
 236   1      
 237   1              
 238   1              
 239   1              
 240   1        BK_Write_Reg(64, 0x8000);
C51 COMPILER V9.52.0.0   KB4815                                                            06/01/2018 15:43:47 PAGE 5   

 241   1        BK_Write_Reg(65, 0xc000);
 242   1        BK_Write_Reg(66, 0xd083);//updated
 243   1        BK_Write_Reg(67, 0x2000);//updated
 244   1        BK_Write_Reg(68, 0x8000);
 245   1        BK_Write_Reg(69, 0x27FF);//updated
 246   1        BK_Write_Reg(70, 0x40fe);
 247   1      
 248   1        BK_Write_Reg(71, 0x0a18);//updated
 249   1        BK_Write_Reg(72, 0xe002);//updated
 250   1        BK_Write_Reg(73, 0x1a00);//updated
 251   1        BK_Write_Reg(74, 0x0000);//updated
 252   1        BK_Write_Reg(75, 0x7a80);
 253   1        BK_Write_Reg(76, 0xE204);
 254   1        BK_Write_Reg(77, 0x0000);
 255   1        BK_Write_Reg(78, 0x0000);
 256   1        BK_Write_Reg(79, 0x0000);
 257   1        BK_Write_Reg(80, 0x0000);
 258   1      
 259   1        BK_Write_Reg(81, 0xB200);
 260   1        BK_Write_Reg(82, 0x0000);
 261   1        BK_Write_Reg(83, 0x8000);
 262   1        BK_Write_Reg(84, 0xFC40);
 263   1        BK_Write_Reg(85, 0x70a6);
 264   1        BK_Write_Reg(86, 0x0000);
 265   1        BK_Write_Reg(87, 0x0000);
 266   1        BK_Write_Reg(88, 0x0000);
 267   1        BK_Write_Reg(89, 0xff81);//updated
 268   1        BK_Write_Reg(90, 0x7D26);//updated
 269   1        
 270   1        BK_Write_Reg(91, 0x0000);//updated
 271   1        BK_Write_Reg(92, 0x0000);//updated
 272   1        BK_Write_Reg(93, 0x0000);
 273   1        BK_Write_Reg(94, 0x00e8);//updated
 274   1        BK_Write_Reg(95, 0x0237);
 275   1        BK_Write_Reg(96, 0x0080);
 276   1        BK_Write_Reg(97, 0x0000);
 277   1        BK_Write_Reg(98, 0x0005);
 278   1        BK_Write_Reg(99, 0x0000);
 279   1        BK_Write_Reg(100, 0x0080);
 280   1      
 281   1        BK_Write_Reg(101, 0x0000);
 282   1        BK_Write_Reg(102, 0x0000);
 283   1        BK_Write_Reg(103, 0x431f);
 284   1        BK_Write_Reg(104, 0x0000);
 285   1        BK_Write_Reg(105, 0x0000);
 286   1        BK_Write_Reg(106, 0xcc31);//Firmware Version
 287   1        BK_Write_Reg(107, 0x3415);
 288   1        BK_Write_Reg(108, 0x6927);//updated
 289   1        BK_Write_Reg(109, 0x4600);//updated
 290   1        BK_Write_Reg(110, 0x0000);//updated,121203
 291   1      
 292   1        BK_Write_Reg(111, 0x0000);
 293   1        BK_Write_Reg(112, 0xA000);//updated
 294   1        BK_Write_Reg(113, 0x893b);//updated
 295   1        BK_Write_Reg(114, 0x91b9);//updated
 296   1        
 297   1      
 298   1        BK_Write_Reg(117, 0x0408);//updated           //DTMF
 299   1        //BK_Write_Reg(118, 0x0400);
 300   1        BK_Write_Reg(119, 0x02b4);
 301   1        BK_Write_Reg(120, 0x1103);
 302   1      
C51 COMPILER V9.52.0.0   KB4815                                                            06/01/2018 15:43:47 PAGE 6   

 303   1        BK_Write_Reg(121, 0x2014);
 304   1        BK_Write_Reg(122, 0x46a3 );
 305   1        BK_Write_Reg(123, 0x0002);//updated
 306   1        BK_Write_Reg(124, 0xf3ac);//updated
 307   1        BK_Write_Reg(125, 0x76b5);
 308   1        BK_Write_Reg(126, 0xfff5);//updated
 309   1        BK_Write_Reg(127, 0x3568);//updated
 310   1      
 311   1      
 312   1          /*---------------------------------宽窄带---------------------------------*/
 313   1        val = BK_Read_Reg(1);
 314   1        val &= 0x7FFF;  
 315   1        if( channel.band== wide)  val |= 0x8000;
 316   1        BK_Write_Reg(1, val);   
 317   1      
 318   1        /*---------------------------------VOX设置---------------------------------*/
 319   1        if(channel.isVOXOpen==1)
 320   1        {
 321   2          val=0;
 322   2          val|=0x8000;
 323   2          val|=(channel.VOXLevel<<6);
 324   2          val|=channel.VOX_Gain_Level;
 325   2          BK_Write_Reg(22,val);
 326   2        } 
 327   1        
 328   1        //BK_DTMF_SET_CODE(mDtmfRecive.dtmfCode[0]);
 329   1        
 330   1         EX0 = 1;                           //使能INT1中断
 331   1            /*-----------------允许DTMF接收-----------------------*/
 332   1        val=BK_Read_Reg(66);
 333   1        val|=(0x0001<<11);
 334   1        BK_Write_Reg(66,val); 
 335   1      
 336   1        val=BK_Read_Reg(78);
 337   1        val&=0xf000;
 338   1        val|=0x010f;
 339   1        BK_Write_Reg(78,val);
 340   1        
 341   1        val=BK_Read_Reg(115);
 342   1        val|=(0x0001<<10);
 343   1        BK_Write_Reg(115,val);
 344   1        
 345   1        for(i = 0; i < 16; i++)
 346   1        {
 347   2          BK_Write_Reg(77, ((i) << 12) | 
 348   2                 ((1  << 11)) |
 349   2                 RecvDtmfHighArr[i]);
 350   2          
 351   2          BK_Write_Reg(77, ((i) << 12) |
 352   2                 RecvDtmfLowArr[i]);
 353   2        }
 354   1      
 355   1        EnterBK4815RX();
 356   1      }
 357          
 358          /*-------------------------------------------------------------------------
 359          *函数：BK4815Sleep  4815睡眠模式
 360          *参数：无
 361          *返回值：无
 362          *-------------------------------------------------------------------------*/
 363          void BK4815Sleep(void)
 364          {
C51 COMPILER V9.52.0.0   KB4815                                                            06/01/2018 15:43:47 PAGE 7   

 365   1        BK_Write_Reg(12,  0xFFFF);
 366   1        OUT_APC = 0;
 367   1        IDLE;
 368   1      }
 369          /*-------------------------------------------------------------------------
 370          *函数：BK4815RxAudio  待接收状态
 371          *参数：无
 372          *返回值：无
 373          *-------------------------------------------------------------------------*/
 374          void BK4815RxAudio(void)
 375          {
 376   1        BK_Write_Reg(12,  0x0203);
 377   1        BK_Write_Reg(112, 0x0000);
 378   1        BK_Write_Reg(112, 0xa000);
 379   1        //writeBK4815Reg(117, VCC_NO);
 380   1      }
 381          /*-------------------------------------------------------------------------
 382          *函数：BK4815RssiAndSnr  4815的RSSI和SNR信号强度
 383          *参数：无
 384          *返回值：13：8 SNR  6：0 RSSI   
 385          *-------------------------------------------------------------------------*/
 386          u16 BK4815RssiAndSnr(void)
 387          { 
 388   1        return BK_Read_Reg(68)&0x3f7f;
 389   1      }
 390          
 391          /*----------------------------------------------------------------
 392            ??:BK_Enable_TX_InbandSignal ??TX???? 
 393            ??:?
 394            ??:?
 395          *----------------------------------------------------------------*/
 396          void BK_Enable_TX_InbandSignal()
 397          {
 398   1        u16 val = 0;
 399   1        val = BK_Read_Reg(40);
 400   1        val |= 0x8000;
 401   1        
 402   1        BK_Write_Reg(40, val);
 403   1      }
 404          /*----------------------------------------------------------------
 405            ??:BK_Disable_TX_InbandSignal ??TX???? 
 406            ??:
 407            ??:?
 408          *----------------------------------------------------------------*/
 409          void BK_Disable_TX_InbandSignal()
 410          {
 411   1        u16 val = 0;
 412   1        val = BK_Read_Reg(40);
 413   1        val &= 0x7FFF;  
 414   1        BK_Write_Reg(40, val);
 415   1      }
 416          /*----------------------------------------------------------------
 417            ??:BK_RX2TX ?????
 418            ??:
 419            ??:?
 420          *----------------------------------------------------------------*/
 421          void BK_RX2TX()
 422          {
 423   1        u16 val;
 424   1        //BK_Write_Reg(109,0x7700);
 425   1      
 426   1        g_reg0_15_buff[12]=0xf823;//reg7<0>=1, High supply LDO
C51 COMPILER V9.52.0.0   KB4815                                                            06/01/2018 15:43:47 PAGE 8   

 427   1        BK_Write_Reg(12, g_reg0_15_buff[12]);
 428   1        val=BK_Read_Reg(112);
 429   1        val|=0x2000;
 430   1        BK_Write_Reg(112,0x4000);
 431   1        BK_Write_Reg(112,0xe000); 
 432   1        
 433   1      }
 434          /*----------------------------------------------------------------
 435            ??:BK_TX2RX ?????
 436            ??:
 437            ??:?
 438          *----------------------------------------------------------------*/
 439          void BK_TX2RX()
 440          {
 441   1        BK_Write_Reg(112,0xa000);
 442   1        BK_Write_Reg(12, 0x0603);
 443   1      }
 444          
 445          void BK_DTMF_INTERUPT_CLEAR()
 446          {
 447   1        u16 val;
 448   1        val=BK_Read_Reg(116);
 449   1        val|=0x0400;
 450   1        BK_Write_Reg(116,val);
 451   1          val=BK_Read_Reg(78);
 452   1        val&=0xff0f;
 453   1        BK_Write_Reg(78,val);
 454   1      }
 455          
 456          /*-------------------------------------------------------------------------
 457          *函数：BK_DTMF_RX_Read  读DTMF编码
 458          *参数：无
 459          *返回值：DTMF编码
 460          *-------------------------------------------------------------------------*/
 461          u8 BK_DTMF_RX_Read()
 462          {
 463   1        u8 dtmf_addr=0;
 464   1        u16 val=0;
 465   1        val=BK_Read_Reg(78);
 466   1        dtmf_addr=(val>>4)&0x0f;
 467   1        return dtmf_addr;
 468   1      }
 469          /*-------------------------------------------------------------------------
 470          *??:BK_DTMF_TX  DTMF??
 471          *??:  *buf DTMF??   len ???? 
 472          *???:?
 473          *-------------------------------------------------------------------------*/
 474          void BK_DTMF_TX(u8 buf)
 475          {
 476   1        u16 val;
 477   1         IDLE;
 478   1        OPEN_TX;
 479   1        
 480   1          /*------------------------DTMF模式-------------------------------------*/
 481   1          val = BK_Read_Reg(40);
 482   1          val &= 0x1FFF;
 483   1          val |= 0x2000;        /* bit14,13 :01 */  //revised 2009.12.09, inband send was enabled in BK_DTMF_TX
 484   1          BK_Write_Reg(40, val);    /* DTMF */
 485   1        BK_RX2TX();
 486   1        BK_Disable_TX_InbandSignal();
 487   1        OUT_APC=1;
 488   1      
C51 COMPILER V9.52.0.0   KB4815                                                            06/01/2018 15:43:47 PAGE 9   

 489   1        BK_Write_Reg(24, SendDtmfLowArr[buf]);
 490   1        BK_Write_Reg(25, SendDtmfHighArr[buf]);
 491   1      
 492   1        BK_Enable_TX_InbandSignal();  
 493   1      
 494   1        delayms(40); /* DelayMs 40ms */
 495   1        BK_Disable_TX_InbandSignal();
 496   1      
 497   1        
 498   1      }
 499          u8 isDtmfSendOK() 
 500          {
 501   1        uchar dat;  
 502   1        mRecive=MRECIVE_NONE;
 503   1        OUT_APC=1;
 504   1        BK_DTMF_INTERUPT_CLEAR();
 505   1        BK_DTMF_TX((mDtmfRecive.dtmfCode&0xf0)>>4);
 506   1        OUT_APC=0;
 507   1        EnterBK4815RX();    
 508   1        delayms(80);
 509   1        dat=BK_DTMF_RX_Read();
 510   1        if((dat==(mDtmfRecive.dtmfCode&0x0f))&&(mRecive==MRECIVE_BK4815_INTERUPT))    
 511   1        {
 512   2          mRecive=MRECIVE_NONE;     
 513   2          return 1;
 514   2        }   
 515   1        else
 516   1        {
 517   2          return 0; 
 518   2        }
 519   1      }
 520          /*-------------------------------------------------------------------------
 521          *函数：StartBK4815TX  发射
 522          *参数：无
 523          *返回值：无
 524          *-------------------------------------------------------------------------*/
 525          void StartBK4815TX(void)
 526          {   
 527   1        u16 val = 0;  
 528   1        u16 if_h=0;
 529   1        u16 if_l=0;
 530   1        u32 val1;   
 531   1        u8 freqband=0;
 532   1        OUT_APC = 0;
 533   1        IDLE;
 534   1        
 535   1        OPEN_TX;
 536   1              /*---------------------------------发射频率---------------------------------*/ 
 537   1        g_reg0_15_buff[4]&=0xffe7;
 538   1        if((channel.RX_Freq>=380)&&(channel.RX_Freq<=590)){g_reg0_15_buff[4]|=0x0000;freqband=8; if_l=0x3568;if_h
             -=0xfff5;}
 539   1        else if((channel.RX_Freq>=255)&&(channel.RX_Freq<=394)){g_reg0_15_buff[4]|=0x0100;freqband=12;if_l=0xd01c
             -;if_h=0xffef;}
 540   1        else if((channel.RX_Freq>=192)&&(channel.RX_Freq<=295)){g_reg0_15_buff[4]|=0x0080;freqband=16;if_l=0x6ad0
             -;if_h=0xffea;}
 541   1        else if((channel.RX_Freq>=123)&&(channel.RX_Freq<=187)){g_reg0_15_buff[4]|=0x0180;  freqband=24;if_l=0xa03
             -8;if_h=0xffdf;}
 542   1        BK_Write_Reg(4,g_reg0_15_buff[4]);
 543   1        
 544   1        val1=(u32)(channel.RX_Freq*freqband*(645277.54));
 545   1      
 546   1        BK_Write_Reg(113,(u16)(val1/65536));
C51 COMPILER V9.52.0.0   KB4815                                                            06/01/2018 15:43:47 PAGE 10  

 547   1        BK_Write_Reg(114,(u16)(val1%65536));
 548   1        BK_Write_Reg(125,0x76b5);
 549   1        BK_Write_Reg(126,if_h);
 550   1        BK_Write_Reg(127,if_l);
 551   1      
 552   1      
 553   1        delayms(10);
 554   1        
 555   1        
 556   1        val = BK_Read_Reg(40);
 557   1          val &= 0x1FFF;
 558   1          val |= 0x2000;        /* bit14,13 :01 */  //revised 2009.12.09, inband send was enabled in BK_DTMF_TX
 559   1          BK_Write_Reg(40, val);    /* DTMF */
 560   1        
 561   1        BK_Write_Reg(112,0x4000);                //RX TO TX 
 562   1        BK_Write_Reg(112,0xe000);                //RX TO TX 
 563   1        BK_Write_Reg(12, 0xf823);                //TX POWER UP  
 564   1        BK_Write_Reg(109, 0xf700);  //PA output control
 565   1        if(isDtmfSendOK())
 566   1        {   
 567   2        
 568   2          BK_Write_Reg(44, 0x0017);//updated 4812
 569   2          BK_Write_Reg(17, 0x5800);//updated 4812
 570   2            val = BK_Read_Reg(40);
 571   2            val &= 0x9FFF;
 572   2            val |= 0x8000;        /* inband type bit14,13 :00 */
 573   2            BK_Write_Reg(40, val);    /* Speech */
 574   2        
 575   2            BK_RX2TX();
 576   2            OPEN_TX;
 577   2            OUT_APC=1;
 578   2            mFlag.SqOpen = 1;
 579   2            
 580   2        }
 581   1        else
 582   1        {
 583   2          EnterBK4815RX();
 584   2        }
 585   1      
 586   1      
 587   1      }
 588          
 589          
 590          
 591          /*-------------------------------------------------------------------------
 592          *函数：EnterBK4815RX  接收
 593          *参数：无
 594          *返回值：无
 595          *-------------------------------------------------------------------------*/
 596          void EnterBK4815RX(void)
 597          { 
 598   1        u16 val = 0;  
 599   1        u16 if_h=0;
 600   1        u16 if_l=0;
 601   1        u32 val1;
 602   1        u8 freqband=0;
 603   1        OUT_APC = 0;
 604   1        IDLE;
 605   1        OPEN_RX
 606   1              /*---------------------------------发射频率---------------------------------*/ 
 607   1        g_reg0_15_buff[4]&=0xffe7;
 608   1        if((channel.RX_Freq>=380)&&(channel.RX_Freq<=590)){g_reg0_15_buff[4]|=0x0000;freqband=8; if_l=0x3568;if_h
C51 COMPILER V9.52.0.0   KB4815                                                            06/01/2018 15:43:47 PAGE 11  

             -=0xfff5;}
 609   1        else if((channel.RX_Freq>=255)&&(channel.RX_Freq<=394)){g_reg0_15_buff[4]|=0x0100;freqband=12;if_l=0xd01c
             -;if_h=0xffef;}
 610   1        else if((channel.RX_Freq>=192)&&(channel.RX_Freq<=295)){g_reg0_15_buff[4]|=0x0080;freqband=16;if_l=0x6ad0
             -;if_h=0xffea;}
 611   1        else if((channel.RX_Freq>=123)&&(channel.RX_Freq<=187)){g_reg0_15_buff[4]|=0x0180;  freqband=24;if_l=0xa03
             -8;if_h=0xffdf;}
 612   1        BK_Write_Reg(4,g_reg0_15_buff[4]);
 613   1        
 614   1        val1=(u32)(channel.RX_Freq*freqband*(645277.54));
 615   1      
 616   1        BK_Write_Reg(113,(u16)(val1/65536));
 617   1        BK_Write_Reg(114,(u16)(val1%65536));
 618   1        BK_Write_Reg(125,0x76b5);
 619   1        BK_Write_Reg(126,if_h);
 620   1        BK_Write_Reg(127,if_l);
 621   1      
 622   1      
 623   1        delayms(15);
 624   1          BK_Write_Reg(22,  0xB200);  //VOX
 625   1        BK_Write_Reg(90,  0x45F6);  //??
 626   1        BK_Write_Reg(91,  0x2616);  //消尾音亚音频55Hz
 627   1        BK_Write_Reg(92,  0x4001);
 628   1          BK_Write_Reg(109, 0x4600);  //PA output control
 629   1        BK_Write_Reg(112,0xa000);
 630   1      
 631   1        BK_Write_Reg(12, 0x0603);
 632   1      
 633   1      }
 634          
 635          void BK_DTMF_RECIVE()
 636          {
 637   1          uchar dat=0;
 638   1        uchar i=0;    
 639   1      
 640   1        dat=BK_DTMF_RX_Read();
 641   1          rexci[reccount]=dat;
 642   1        
 643   1        
 644   1      
 645   1        if(dat == ((mDtmfRecive.dtmfCode&0xf0)>>4))
 646   1        {       
 647   2          delayms(40);
 648   2          BK_DTMF_TX(mDtmfRecive.dtmfCode&0x0f);
 649   2          mDtmfRecive.DtmfSussece=1;
 650   2          EnterBK4815RX();
 651   2          BK_TX2RX();
 652   2          delayms(80);
 653   2        }     
 654   1        else
 655   1        {   
 656   2          mDtmfRecive.DtmfSussece=0;
 657   2        }
 658   1        BK_DTMF_INTERUPT_CLEAR();
 659   1      }
 660          
 661          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3484    ----
   CONSTANT SIZE    =    128    ----
C51 COMPILER V9.52.0.0   KB4815                                                            06/01/2018 15:43:47 PAGE 12  

   XDATA SIZE       =    248      31
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
